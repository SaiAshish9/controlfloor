<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>ControlFloor</title>

<link rel="stylesheet" href="https://cdn.materialdesignicons.com/4.9.95/css/materialdesignicons.min.css" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto&display=swap" />
<link rel="stylesheet" href="/assets/css/styles.css" />
<link rel="stylesheet" href="/assets/css/sidebar.css" />
<link href="https://unpkg.com/@mountable/spinners@0.0.25/dist/mSpinnerSwirl.css" rel="stylesheet">

<meta charset="utf-8">
<style>
  canvas {
    border: solid 1px black;
  }
  .m-spinner--swirl {
    --spinner-color: red;
    --spinner-color-secondary: blue;
  }
  .hidden {
    display: none;
  }
</style>
<script>
  function getel( id ) {
    return document.getElementById( id );
  }
  function getCursorPosition(canvas, event) {
    const rect = canvas.getBoundingClientRect()
    const x = event.clientX - rect.left
    const y = event.clientY - rect.top
    console.log("x: " + x + " y: " + y)
    return [x,y];
  }
  var session='';
  var udid="{{ html .udid }}";
  var clickWid={{ html .clickWidth }};
  var clickHeg={{ html .clickHeight }};
  var vidWid={{ html .vidWidth }};
  var vidHeg={{ html .vidHeight }};
  var maxHeg={{ html .maxHeight }};
  var displayWid=0;
  var displayHeg=0;
  var base = document.location.protocol + '//' + document.location.host;
  var gone = 0;
  var rid="{{ html .rid }}";
  var idleTimeout = "{{ html .idleTimeout }}" * 1;
  var keyid = 0;
  var mouseDownDate;
  var mouseUpDate;
  
  if( vidHeg < maxHeg ) {
    displayHeg = vidHeg;
    displayWid = vidWid;
  } else {
    var wOverH = vidWid / vidHeg;
    displayHeg = maxHeg;
    displayWid = maxHeg * wOverH;
  }
  function req( type, url, handler, body ) {
    var xhr = new XMLHttpRequest();
    xhr.open( type, url, true );
    xhr.responseType = 'json';
    xhr.onload = function(x) { handler(x,xhr); }
    if( type == 'POST' && body ) {
        if( typeof( body ) == 'object' ) {
            var data = new FormData();
            var test = {};
            for( var k in body ) if( body.hasOwnProperty( k ) ) { data.append( k, body[k] ); test[k] = body[k]; }
            console.log( test );
            xhr.send( data );
        }
        else xhr.send(body);
    }
    else xhr.send();
  }
  
  var waitnum = 0;
  function wait() {
    if( !waitnum ) {
      var waiter = getel("waiter");
      waiter.className = "m-spinner--swirl";
    }
    waitnum++;
  }
  function unwait() {
    if( waitnum > 0 ) waitnum--;
    if( !waitnum ) {
      var waiter = getel("waiter");
      waiter.className = "m-spinner--swirl hidden";
    }
  }
  
  function clickAt( pos ) {
    var x = Math.floor( (pos[0]/displayWid)*clickWid ); 
    var y = Math.floor( (pos[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/click', function() {
      unwait();
    }, { udid, x, y } );    
  }
  function doHardPress( pos ) {
    var x = Math.floor( (pos[0]/displayWid)*clickWid ); 
    var y = Math.floor( (pos[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/hardPress', function() {
      unwait();
    }, { udid, x, y } );    
  }
  function doLongPress( pos ) {
    var x = Math.floor( (pos[0]/displayWid)*clickWid ); 
    var y = Math.floor( (pos[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/longPress', function() {
      unwait();
    }, { udid, x, y } );    
  }
  function swipe( pos1, pos2, delay ) {
    var x1 = Math.floor( (pos1[0]/displayWid)*clickWid ); 
    var y1 = Math.floor( (pos1[1]/displayHeg)*clickHeg );
    var x2 = Math.floor( (pos2[0]/displayWid)*clickWid ); 
    var y2 = Math.floor( (pos2[1]/displayHeg)*clickHeg );
    wait();
    req( 'POST', base + '/device/swipe', function() {
      unwait();
    }, { udid, x1, y1, x2, y2, delay } );    
  }
  var keyqueue = [];
  var prevKeys = [];
  var inRequest = 0;
  var pos1;
  /*
  sendKeys has been hacked up a bunch since it was originally written.
  Right now it is sending a single key at a time and waiting for that
  call to complete before sending another key.
  
  This is done to prevent concurrency from causing keys to be entered
  out of typing order.
  
  There is additional information being sent that is not needed currently
  that could be used to be extremely sure keys are never sent out of order.
  
  This function can still be improved some more, as if keys are backed up
  and waiting to be sent we could send more than a single key at once.
  
  The backend doesn't handle doing that as well as desierd so that is
  avoided currently.
  */
  function sendKeys() {
    if( !keyqueue.length || inRequest ) return;
    //var keys = keyqueue.join("");
    var keyOb = keyqueue.shift();
    
    //keyqueue = [];
    inRequest = 1;
    wait();
    req( 'POST', base + '/device/keys', function() {
      unwait();
      inRequest = 0;
      if( keyqueue.length ) sendKeys();
    }, {
      udid: udid,
      keys: keyOb.keycode,
      curid: keyOb.keyid,
      prevkeys: prevKeys.join("")
    } );
    prevKeys.unshift( keyOb.keyid );
    while( prevKeys.length > 5 ) prevKeys.pop();
  }
  
  var mode = 'normal';
  var capture  = {}; // onkeydown
  var capture2 = {}; // onkeypress
  capture[-8] = -8; // backspace
  capture[-9] = -9; // tab
  capture[-13] = -13; // enter
  capture[-34] = -34; // pagedown
  capture[-33] = -33; // pageup
  capture[-35] = -35; // end
  capture[-36] = -36; // home
  capture[-37] = -37; // left
  capture[-38] = -38; // up
  capture[-39] = -39; // right
  capture[-40] = -40; // down
  capture[-46] = -46; // delete
  
  //capture[68] = 68; // delete; map to ascii delete
  capture2[39] = 39; // ' - quick search in firefox
  capture2[47] = 47; // / - quick search also
  window.addEventListener("load", function(evt) {
    var canvas    = getel("canvas");
    var ctx       = canvas.getContext("2d");
    var home      = getel("home");
    var hardPress = getel("hardPress");
    var longPress = getel("longPress");
    var under     = getel("under");
    var vidbox    = getel("vidbox");
    var ws;
    
    var idleSeconds = 0;
    
    vidbox.style.width  = ( displayWid + 100 ) + "px";
    canvas.width      = displayWid;
    canvas.height     = displayHeg;
    under.style.width = displayWid + "px";
    
    home.onclick = function( event ) {
      wait();
      req( 'POST', '/device/home', function() {
        unwait();
      }, { udid } );  
    }
    hardPress.onclick = function( event ) {
      if( mode != 'hard' ) {
        hardPress.className = 'mdi mdi-anvil mActive';
        longPress.className = 'mdi mdi-alarm-multiple mInactive';
        mode = 'hard';
      } else {
        hardPress.className = 'mdi mdi-anvil mInactive';
        mode = 'normal';
      }
    }
    longPress.onclick = function( event ) {
      if( mode != 'long' ) {
        longPress.className = 'mdi mdi-alarm-multiple mActive';
        hardPress.className = 'mdi mdi-anvil mInactive';
        mode = 'long';
      } else {
        longPress.className = 'mdi mdi-alarm-multiple mInactive';
        mode = 'normal';
      }
    }
    
    canvas.onmousedown = function( event ) {
      mouseDownDate = new Date();
      var pos = getCursorPosition( canvas, event );
      if     ( mode == 'hard' ) doHardPress( pos );
      else if( mode == 'long' ) doLongPress( pos );
      else                      pos1 = pos;
    }
    
    canvas.onmouseup = function( event ) {
      if( mode != 'normal' ) return;
      mouseUpDate = new Date();
      var msDiff = mouseUpDate - mouseDownDate;
      var sDiff = msDiff / 1000;
      sDiff = Math.floor( sDiff * 100 ) / 100; // .00 resolution
      var pos2 = getCursorPosition( canvas, event );
      var dx = Math.abs( pos2[0] - pos1[0] );
      var dy = Math.abs( pos2[1] - pos1[1] );
      if( dx > 3 || dy > 3 ) {
        swipe( pos1, pos2, sDiff );
      }
      else clickAt( pos1 );
    }
    
    window.onkeydown = function( event ) {
      var key = event.key;
      if( key == "Shift" ) return;
      if( key.length==1 ) key = key.charCodeAt(0);
      else key = -event.keyCode;
      
      if( capture[ key ] ) {
        key = capture[ key ];
        event.preventDefault();
        keyqueue.push( {
          keycode: key,
          keyid: keyid
        } );
        keyid++;
        sendKeys();
      }
      else console.log( "key " + key );
    }
    
    window.onkeypress = function( event ) {
      var key = event.key;
      
      if( key.length==1 ) key = key.charCodeAt(0);
      else key = -event.keyCode;
      
      keyqueue.push( {
        keycode: key,
        keyid: keyid
      } );
      keyid++;
      sendKeys();
      if( capture2[ key ] ) {
        event.preventDefault();
      } else console.log( "key2 " + key );
    }
    
    var wsprot = ( document.location.protocol == 'https:' ) ? "wss" : "ws"; 
    var url = wsprot+":\/\/"+document.location.host+"\/device/imgStream?udid={{ html .udid }}";
    ws = new WebSocket( url );
    ws.onopen = function( event ) {
        console.log("Websocket open");
    }
    ws.onclose = function( event ) {
        console.log("Websocket closed");
        ws = null;
    }
    ws.onmessage = function( event ) {
        if( event.data instanceof Blob ) {
          var image = new Image();
          var url;
          image.onload = function() {
            ctx.drawImage(image, 0, 0, displayWid, displayHeg );
            URL.revokeObjectURL( url );
          };
          image.onerror = function( e ) {
            console.log('Error during loading image:', e);
          }
          var blob = event.data;
          
          url = URL.createObjectURL( blob );
          image.src = url;
        }
        else {
            var data = event.data;
            if( typeof data === 'string' ) {
                var json = JSON.parse( data );
                var type = json.type;
                if( type && type == 'kick' ) {
                    alert("You have been kicked");
                    document.location.href = "/";
                }
            }
            console.log( event.data );
        }
    }
    ws.onerror = function( event ) {
        console.log( "Error: ", event.data );
    }
    if( idleTimeout ) {
      setInterval( function() {
        idleSeconds += 3;
        if( idleSeconds > idleTimeout ) {
          ws.close();
          navigator.sendBeacon( "/device/videoStop?udid="+udid+"&rid="+rid, "" );
          alert("Inactivity timeout");
          document.location.href = '/';
        }
      }, 3000 );
      window.onmousemove = function() {
        idleSeconds = 0;
      }
    }
  });
</script>
<script defer src="/assets/js/lifecycle.es5.js"></script>
<script defer>
  setTimeout( function() {
    lifecycle.addEventListener('statechange', function( event ) {
      // Despite information online saying this should work with visibilitychange; it does not
      if( !gone && /*event.originalEvent == 'visibilitychange' && */event.newState == 'hidden' ) {
        gone = 1;
        console.log("Sending beacon for udid " + udid );
        navigator.sendBeacon( "/device/videoStop?udid="+udid+"&rid="+rid, "" );
      }
    } );
  }, 1000 );
</script>

</head>

<body>
    {{template "sidebar" dict "udid" .udid "deviceVideo" .deviceVideo}}
    <div id="main mainWsidebar" class="main">
        <div id="vidbox" style="margin:auto">
            <canvas id="canvas" width="375" height="667"></canvas> <i id="waiter" style="vertical-align: top" class="hidden m-spinner--swirl"></i><br>
            <div style="width:375px; font-size: 32px" id="under">
                <center>
                    <i id='home' class="mdi mdi-home"></i>
                    <i id='hardPress' class="mdi mdi-anvil mInactive"></i>
                    <i id='longPress' class="mdi mdi-alarm-multiple mInactive"></i>
                </i>
            </div>
        </div>
    </div>
</body>
</html>
